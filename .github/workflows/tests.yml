name: Tests

on:
  push:
    branches: [master, main, Working]

jobs:
  test:
    runs-on: ubuntu-22.04
    env:
      # variables for our front-end tests, see client/src/config.ts
      VITE_API_ORIGIN: http://localhost:3000
      VITE_API_PATH: /api/v1/trpc

      # variables for our back-end tests, see server/src/config.ts
      TEST_DATABASE_URL: postgres://capstone:capstone@localhost:5432/testdb
      DATABASE_URL: postgres://capstone:capstone@localhost:5432/devdb
      BASE_URL: http://localhost:3000

      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USER : ${{ secrets.SMTP_USER }}
      SMTP_PASS: ${{ secrets.SMTP_PASS }}

      AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
      AUTH0_DOMAIN : ${{ secrets.AUTH0_DOMAIN }}
      CLIENT_ORIGIN_URL: ${{ secrets.CLIENT_ORIGIN_URL }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
    services:
      # spin up a database for tests
      postgres-test:
        image: postgres:16.1-alpine
        env:
          # Postgres will create a database with the following credentials
          POSTGRES_USER: capstone
          POSTGRES_PASSWORD: capstone
          POSTGRES_DB: testdb
        ports:
          - 5433:5432
      postgres-dev:
        image: postgres:16.1-alpine
        env:
          # Postgres will create a database with the following credentials
          POSTGRES_USER: capstone
          POSTGRES_PASSWORD: capstone
          POSTGRES_DB: devdb
        ports:
          - 5434:5432
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.14.0'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check server
        run: npm run typecheck -w=server

      - name: Format code server
        run: npm run format -w=server

      - name: Format code client
        run: npm run format -w=client

      # - name: Type check client
      #   run: npm run typecheck -w=client

      - name: Lint server
        run: npm run lint -w=server

      # - name: Lint client
      #   run: npm run lint -w=client

      - name: Test client (unit)
        run: npm run test:unit -w=client

      - name: Run server database migrations
        run: npm run migrate:latest -w=server

      - name: Test server
        run: npm run test -w=server

      # Add more browsers here if you want to test on more/different browsers
      # - name: Install Playwright Browsers
      #   run: npx playwright install --with-deps chromium

      # Testing the entire application with a running API server.
      # We must start the server first. & at the end of the command
      # makes it run in the background. While it is starting up,
      # we will continue with other steps.

      # - name: Start server for E2E tests
      #   run: npm run dev -w=server &

      # Build the front end for E2E tests. We are building it
      # instead of running it in dev mode because there is some
      # differences between dev mode and production mode front
      # end code.

      # - name: Build front end for E2E tests
      #   run: npm run build -w=client

      # Just to make sure that our server is up and running before
      # we start our E2E tests, we will use a health check action
      # which will make a request to the server and wait for it to
      # respond with a non-failing status code.
      # This assumes we have a public /api/health endpoint in our
      # Express server that returns a non-failing status code.

      # - name: Wait for server to startup
      #   uses: Jtalk/url-health-check-action@v4
      #   with:
      #     max-attempts: 5
      #     retry-delay: 5s
      #     url: ${{ env.VITE_API_ORIGIN }}/api/health

      # - name: Test client E2E
      #   run: npm run test:e2e -w=client

      # Playwright generates a report of the E2E tests. We will
      # upload that report as an artifact so that we can download
      # it later from the GitHub Actions UI. This will help us
      # debug any issues that occured in E2E tests.
      # - uses: actions/upload-artifact@v4
      #   if: always()
      #   with:
      #     name: playwright-report
      #     path: client/playwright-report/
      #     retention-days: 7
