services:
  # spin up a database
  postgres:
    image: postgres:16.1-alpine
    environment:
      POSTGRES_USER: capstone
      POSTGRES_PASSWORD: capstone
      POSTGRES_DB: capstone
    ports:
      - '5432'
    volumes:
      - capstone-db:/var/lib/postgresql/data
      - ./server/init-db:/docker-entrypoint-initdb.d

  # start up an API server
  server:
    build:
      context: .
      dockerfile: ./server/Dockerfile
    env_file:
      - ./server/.env
    environment:
      DATABASE_URL: postgres://capstone:capstone@postgres:5432/capstone
      TEST_DATABASE_URL: postgres://capstone:capstone@postgres:5432/capstone_tests
      PORT: 3000
    ports:
      - '3000'
    depends_on:
      - postgres

  # start up a client (and proxy) server
  client:
    build:
      context: .
      dockerfile: ./client/Dockerfile
      args:
        VITE_API_ORIGIN: http://localhost:3000
        VITE_API_PATH: /api/v1/trpc
        VITE_API_SERVER_URL: http://localhost:3000
        VITE_AUTH0_DOMAIN: dev-3qsgmfliabn71f32.eu.auth0.com
        VITE_AUTH0_CLIENT_ID: 0MNQbCbBy2PO3pMtNM1jLsKc9SVmErjD
        VITE_AUTH0_AUDIENCE: https://hello-world.example.com
        VITE_AUTH0_CALLBACK_URL: http://localhost:5174/callback

    env_file:
      - ./client/.env
    environment:

      # Since our client NGINX server is not only serving static
      # files, but also routing /api requests to our API server,
      # we need to inform NGINX how it can reach the API server.
      # Our API server is accessible as "http://server:3000".
      # Docker Compose does some magic for us to map the
      # service name (server) to the internal container IP.
      # However, when we will deploy our application to
      # production, we will not use Docker Compose, and we
      # might need to use localhost instead.
      # To support both environments, we will use an environment
      # variable to configure the proxy pass.
      # Our development environment will use the provided value
      # below.
      API_PROXY_PASS: http://server:3000
    ports:
      - '5174:80'
    depends_on:
      - server

volumes:
  capstone-db:
